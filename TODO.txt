- Make systems a class.
- Fix physics.
- Fix jump.
- Add extra indirection, allow entities to be removed.

- Store components per system in entity.
- Message specific component of entity.

- Basic chunk.

IDEA:

class System {
    ... ...
    virtual void init(..., Config config) = 0
    virtual void update(UpdateInfo update) = 0
    virtual void sendMessage(MessageType type, void* data) = 0
    Handle addComponent(Handle entity)
    void removeComponent(Handle component)
}

void init(data, config) {
    initGameData(data)

    foreach system in data.systems:
        system.init(data, config)

    loadScene(...)
}


void update(data, update) {
    foreach system in data.systems:
        system.update(update) // problem: virtual call to known system...
}


void sendMessage(data, Handle receiver, MessageType type, void* data) {
    getSystem(data, receiver.type).sendMessage(type, data)
}

System& getSystem(data, SystemType type) {
    return data[type]
}
